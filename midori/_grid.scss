/**
 * This is the powerful grid library used for create your grid system
 *
 * It will support 3 types of grid:
 *
 * 1. The flex based grid system
 * 2. The percentage and float left grid system
 * 3. The CSS grid system
 *
 * You can choose the one you want to use including corresponding mixins.
 *
 * It is highly customizable, you can customize:
 *
 * 1. Breakpoints
 * 2. Column count
 * 3. Seperator
 * 4. Column names
 * 5. Column gap
 *
 * @author Jack <jack.fu@cxagroup.com>
 * @version 0.0.1
 * @date Mon Nov 20 12:10:34 2017
 *
 * @import sass-mq/mq, midori/flex
 */

$midori-grid-row-name: "row" !default;
$midori-container-margin-right: auto !default;
$midori-container-margin-left: auto !default;
$midori-container-padding-right: 15px !default;
$midori-container-padding-left: 15px !default;
$midori-row-padding-left: -15px !default;
$midori-row-padding-right: -15px !default;
$midori-cell-padding-left: 15px !default;
$midori-cell-padding-right: 15px !default;
$default-word-column-names: one two three four five six seven eight nine ten eleven twelve;
$default-number-column-names: 1 2 3 4 5 6 7 8 9 10 11 12;

.midori-container-defaults {
	height: auto;
	margin-right: $midori-container-margin-right;
	margin-left: $midori-container-margin-left;
	padding-right: $midori-container-padding-right;
	padding-left: $midori-container-padding-left;
}

@mixin midori-container($break-points: (), $break-point-widths: ()) {
	@if length(map-keys($break-points)) > 0 {
		// We do have break points, it will act like the simple break container
		@each $key in map-keys($break-points) {
			$width: map-get($break-points, $key);

			@include mq($from: $width) {
				width: map-get($break-point-widths, $key);
			}
		}

		$midori-container-mode: "container";
	}
	@else {
		// We don't have break points as input, it will act like container fluid
		$midori-container-mode: "fluid";
	}

	// We can include the contents now
	@content;
}

@mixin midori-grid-row-base {
	box-sizing: border-box;
	margin-right: $midori-row-padding-right;
	margin-left: $midori-row-padding-left;

	// Let the row grow on it's flex direction
	@include midori-autoprefixer(flex-grow, 0);

	// This row will display as flex
	@include midori-flex-display;

	// Setup the flex properties of this row
	@include midori-flex(0 1 auto);

	// Make this row will wrap the contents
	@include midori-autoprefixer(flex-wrap, wrap);
}

@mixin midori-grid-row {
	@include midori-autoprefixer(flex-direction, row);
	@include midori-grid-row-base;

	@content;
}

@mixin midori-grid-row-reverse {
	@include midori-autoprefixer(flex-direction, row-reverse);
	@include midori-grid-row-base;

	@content;
}

@mixin midori-column-base {
	// Setup the flex properties of this column
	@include midori-flex(0 0 auto);

	box-sizing: border-box;
	padding-right: $midori-cell-padding-right;
	padding-left: $midori-cell-padding-left;

	@content;
}

@mixin midori-column-settings {
	max-width: 100%;

	@include midori-autoprefixer(flex-basis, 0);
	@include midori-autoprefixer(flex-grow, 1);
}

@mixin midori-flex-grid-column($width) {
	@include midori-column-base;
	@include midori-column-settings;
	@include midori-flex-width($width);
}

@mixin midori-flex-grid-generator($break-points: (), $prefix: col, $names: $default-word-column-names) {
	// Let's get the column count first
	$column-count: length($names);

	.#{$prefix} {
		@include midori-column-base;
	}

	@if length(map-keys($break-points)) > 0 {
		$keys: map-keys($break-points);
		$break-points-count: length($keys);

		@for $i from -1 * $column-count through -1 {
			$name: nth($names, abs($i));
			$from: null;

			@for $count from 1 through $break-points-count {
				$key: nth($keys, $count);

				@if abs($i) == 1 {
					// This is the first one
					@for $count from 1 through $column-count {
						.off-#{$key}-#{$count} {
							margin-left: percentage($count / $column-count);
						}
					}

					.off-#{$key}-reset {
						margin-left: 0;
					}
				}

				@if $count == 1 {
					.#{$prefix}-#{$key}-#{$name} {
						@include mq($until: map-get($break-points, $key)) {
							@include midori-flex-grid-column(abs($i) / $column-count);
						}


						@include mq($from: map-get($break-points, $key)) {
							@include midori-flex-grid-column(abs($i) / $column-count);
						}
					}
				}
				@else {
					.#{$prefix}-#{$key}-#{$name} {
						@include mq($from: $from, $until: map-get($break-points, $key)) {
							@include midori-flex-grid-column(abs($i) / $column-count);
						}


						@if $count == $break-points-count {
							// This is the last
							@include mq($from: map-get($break-points, $key)) {
								@include midori-flex-grid-column(abs($i) / $column-count);
							}
						}
					}
				}

				// Update from
				$from: map-get($break-points, $key);
			}
		}
	}
	@else {
		$i: 1;

		@each $name in $names {
			.#{$prefix}-#{$name} {
				@include mq($from: map-get($brak-points, $key)) {
					@include midori-flex-grid-column($i / $column-count);
				}
			}

			// Let's create the offsets
			@for $count from 1 through $column-count {
				.off-#{$count} {
					margin-left: percentage($count / $column-count);
				}
			}

			$i: $i + 1;
		}
	}

	.off-reset {
		margin-left: 0;
	}
}
